datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String   @id @default(uuid())
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    sessions            Session[]
    accounts            Account[]
    expenses            Expense[]
    expenseSplits       ExpenseSplit[]
    ledgerBalancesOwed  LedgerBalance[] @relation("LedgerDebtorRelation")
    ledgerBalancesOwing LedgerBalance[] @relation("LedgerCreditorRelation")
    settlementsOwed     Settlement[]    @relation("SettlementDebtorRelation")
    settlementsOwing    Settlement[]    @relation("SettlementCreditorRelation")
    netDebtSummary      NetDebtSummary?

    @@unique([email])
    @@map("user")
}

model Expense {
    id          String   @id @default(uuid())
    payerId     String
    description String
    total       Float
    currency    String   @default("USD")
    date        DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    payer         User           @relation(fields: [payerId], references: [id])
    expenseSplits ExpenseSplit[]
}

model ExpenseSplit {
    id        String @id @default(uuid())
    expenseId String
    userId    String
    amount    Float

    expense Expense @relation(fields: [expenseId], references: [id])
    user    User    @relation(fields: [userId], references: [id])
}

model LedgerBalance {
    id         String   @id @default(uuid())
    debtorId   String
    creditorId String
    balance    Float
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    debtor   User @relation("LedgerDebtorRelation", fields: [debtorId], references: [id])
    creditor User @relation("LedgerCreditorRelation", fields: [creditorId], references: [id])

    @@unique([debtorId, creditorId])
}

model Settlement {
    id         String   @id @default(uuid())
    debtorId   String
    creditorId String
    amount     Float
    settledAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    debtor   User @relation("SettlementDebtorRelation", fields: [debtorId], references: [id])
    creditor User @relation("SettlementCreditorRelation", fields: [creditorId], references: [id])
}

model NetDebtSummary {
    userId         String   @id
    totalYouOwe    Float
    totalOwedToYou Float
    updatedAt      DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}
